import pandas as pd
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from collections import Counter
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from nltk.corpus import stopwords
import nltk
nltk.download('stopwords')

# List of column names for the DataFrame
columns = ["Title", "Artist", "Date", "Unique Artist"]

# Define the initial URL for the desired webpage
base_url = 'https://www.billboard.com/charts/hot-100/'
current_date = datetime(2023, 12, 2)  # Start date

# Initialize an empty list to store all data
all_data = []
all_artists_count = {}  # To keep track of artist appearances throughout the weeks
unique_artists_per_year = {}  # To keep track of unique artists each year

# Loop through each week starting from the current date until 1955-07-09
while current_date >= datetime(1970, 1, 7):
    # Format the date to match the URL pattern
    formatted_date = current_date.strftime('%Y-%m-%d')
    url = f'{base_url}{formatted_date}/'

    # Make a request to the URL and get the HTML content
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find all rows in the list
    rows = soup.find_all('li', class_='o-chart-results-list__item')

    # Dictionary to store the count of artists for the current week
    artist_count = {}

    # Loop through each row and extract the title and artists
    for i, row in enumerate(rows, start=1):  # Start index from 1
        # Extracting the song title (check for the second set of class names)
        title_element = row.find('h3', class_='c-title a-no-trucate a-font-primary-bold-s u-letter-spacing-0021 lrv-u-font-size-18@tablet lrv-u-font-size-16 u-line-height-125 u-line-height-normal@mobile-max a-truncate-ellipsis u-max-width-330 u-max-width-230@tablet-only')
        title = title_element.get_text(strip=True) if title_element else "N/A"

        # Extracting the main artist (check for the second set of class names)
        main_artist_element = row.find('span', class_='c-label a-no-trucate a-font-primary-s lrv-u-font-size-14@mobile-max u-line-height-normal@mobile-max u-letter-spacing-0021 lrv-u-display-block a-truncate-ellipsis-2line u-max-width-330 u-max-width-230@tablet-only')
        main_artist = main_artist_element.get_text(strip=True) if main_artist_element else "N/A"

        # Extracting featured artist(s) excluding featured artists
        featured_artist_element = row.find('span', class_='chart-element-by')
        featured_artist = featured_artist_element.get_text(strip=True) if featured_artist_element else ""
        all_artists = main_artist if "Featuring" not in featured_artist else main_artist + ", " + featured_artist

        # Use simplified regex condition
        if all_artists != 'N/A':
            # Check if the artist has already appeared in the current week
            if all_artists not in artist_count:
                artist_count[all_artists] = 1
            else:
                artist_count[all_artists] += 1

            # Append data to the list for the current week
            all_data.append([title, all_artists, current_date, ""])

    # Update the unique artists count for the current year
    unique_artists_per_year[current_date.year] = len(artist_count)

    # Update the overall artist count
    for artist, count in artist_count.items():
        if artist not in all_artists_count:
            all_artists_count[artist] = count
        else:
            all_artists_count[artist] += count

    # Move to the previous week
    current_date -= timedelta(days=7)

    # Check if the loop should break
    if current_date.year <= 1969:
        break

# Create the final DataFrame after the loop
final_dataframe = pd.DataFrame(all_data, columns=columns)

# Update the "Unique Artist" column with the count of unique artists for each week
final_dataframe["Unique Artist"] = final_dataframe["Date"].dt.year

# Display the final DataFrame without the index
print(final_dataframe.to_string(index=False))

# Count the occurrences of each unique song title
song_counts = final_dataframe['Title'].value_counts()

# Get the top 30 most played songs
top_songs_count = song_counts.nlargest(30)

# Create a bar chart for the 30 most played songs
plt.figure(figsize=(15, 8))
top_songs_count.plot(kind='bar', color='#008080')
plt.title('Top 30 Most Played Songs')
plt.xlabel('Song Title')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Create a line graph for the number of unique artists each year
unique_artists_per_year_items = sorted(unique_artists_per_year.items())
years, unique_artist_counts = zip(*unique_artists_per_year_items)

plt.figure(figsize=(15, 8))
plt.plot(years, unique_artist_counts, marker='o', linestyle='-', color='#FF6347')
plt.xlabel('Year')
plt.ylabel('Number of Unique Artists')
plt.title('Number of Unique Artists on Billboard Hot 100 Each Year')
plt.grid(True)
plt.tight_layout()
plt.show()

# Create a line graph for the top 5 artists over the years
top_artists_count = sorted(all_artists_count.items(), key=lambda x: x[1], reverse=True)[:5]
top_artists, _ = zip(*top_artists_count)

plt.figure(figsize=(15, 8))

for artist in top_artists:
    artist_data = final_dataframe[final_dataframe['Artist'] == artist]
    artist_appearances = artist_data.groupby(artist_data['Date'].dt.year).size().reset_index(name='Appearances')
    plt.plot(artist_appearances['Date'], artist_appearances['Appearances'], label=artist)

plt.xlabel('Year')
plt.ylabel('Number of Appearances')
plt.title("Evolution of Artist Appearances on the Billboard Hot 100 Over the Years (Top 5 Artists)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Extracting words from song titles and removing stop words
stop_words = set(stopwords.words('english'))
all_words = ' '.join(final_dataframe['Title']).lower().split()
filtered_words = [word for word in all_words if word not in stop_words]

# Count the occurrences of each word
word_counts = Counter(filtered_words)

# Get the 30 most common words
top_words = dict(word_counts.most_common(100))

# Create a word cloud for the most common words in song titles
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(top_words)

# Display the word cloud
plt.figure(figsize=(15, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.title('Word Cloud - Top 100 Most Common Words in Song Titles (Excluding Stop Words)')
plt.axis('off')  # Turn off axis labels
plt.show()

# Create a bar chart for the top artists overall
top_artists_count = sorted(all_artists_count.items(), key=lambda x: x[1], reverse=True)[:30]
top_artists, counts = zip(*top_artists_count)

plt.figure(figsize=(15, 8))
plt.bar(top_artists, counts, color='#1338BE')
plt.title('Top 30 Artists Overall')
plt.xlabel('Artist')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

